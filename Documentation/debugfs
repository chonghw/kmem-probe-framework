
On debugfs usage
----------------

For more information, please refer to the canonical trace documentation:

 * ./Documentation/trace/ftrace.txt
 * ./Documentation/trace/tracepoint-analysis.txt
 * and everything else inside ./Documentation/trace/

Actually, some of this information has been copied from there.

1. Debug Filesystem

It's a RAM-based filesystem that can be used to output a lot of different 
debugging information. This filesystem is called debugfs and can be enabled by:

    Kernel hacking
        [*] Debug filesystem

After you enable this option and boot the built kernel,
it creates the directory /sys/kernel/debug as a location
for the user to mount the debugfs filesystem.
Do this manually by:

    $  mount -t debugfs none /sys/kernel/debug

2. Tracing

In order to obtain traces you need to enable CONFIG_TRACING option.
Once it is enabled you should see /sys/kernel/debug/tracing directory,
on your mounted debugfs filesystem.

Traced events can be read through debug/tracing/trace.

To dynamically enable trace events you need to enable CONFIG_FOO.
Once it is enabled you can see the available events by listing
???.
TODO
TODO
TODO
TODO

To enable events on bootup you can add them to kernel parameters,
for instance to enable kmem events:
    
    trace_event=kmem:kmalloc,kmem:kmem_cache_alloc,kmem:kfree,kmem:kmem_cache_free

Beware: if you use SLOB on non-NUMA systems, where you might expect kmalloc_node not get called,
actually it is the only one called.
This is due to SLOB implementing only kmalloc_node and having kmalloc call it without a node.
Same goes to kmem_cache_alloc_node.

  debug/tracing/trace:

    This file holds the output of the trace in a human
    readable format (described below).

  debug/tracing/trace_pipe:

    The output is the same as the "trace" file but this
    file is meant to be streamed with live tracing.
    Reads from this file will block until new data is
    retrieved.


